{"version":3,"sources":["serviceWorker.js","components/DataBtns.jsx","components/Pagination.jsx","components/SearchBar.jsx","containers/TableRow.jsx","components/Table.jsx","data/fetchData.js","containers/App.jsx","index.js"],"names":["Boolean","window","location","hostname","match","DataBtns","props","classname","id","concat","dataSize","onClick","e","handleDataSize","target","react_default","a","createElement","className","Pagination","_this","this","data","arguments","length","undefined","itemsOnPage","numPages","Math","ceil","btnArr","_loop","i","push","key","type","handlePageChange","page","_this2","handlePageButtons","Component","SearchBar","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChangeInput","setState","input","value","handleEnterInput","which","handleSearch","state","name","placeholder","onChange","onKeyPress","TableRow","_this$props$data","firstname","lastname","email","phone","address","description","reactjs_popup_es","trigger","modal","closeOnDocumentClick","closeOnEscape","close","react_fontawesome_index_es","icon","defaultValue","streetAddress","city","zip","Table","sortIcon","sortIconUp","sortIconDown","map","h","handleSort","col","sort","toLowerCase","handleSortChange","d","containers_TableRow","floor","random","smallUrl","bigUrl","fetchSmallData","_fetchSmallData","apply","_callee","smallData","regenerator_default","wrap","_context","prev","next","fetch","catch","error","console","log","sent","json","abrupt","stop","fetchBigData","_fetchBigData","_callee2","bigData","_context2","library","add","faSort","faSortUp","faSortDown","faTimes","invertSortDirection","asc","desc","App","column","direction","filter","loading","initData","bind","assertThisInitialized","getDataByPage","components_SearchBar","Table_Table","orderBy","react_loader_spinner_default","color","height","width","components_DataBtns","components_Pagination","includes","replace","stringSort","b","intSort","Date","dateSort","Number","substr","salarySort","str","dataFiltered","slice","pageNum","dataOnPage","size","fetchedData","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.33d3373b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport '../css/BottomBtns.scss';\n\nconst DataBtns = props => {\n    let classname = id =>\n        `bottom-btn ${id === props.dataSize ? 'active-btn' : ''}`;\n    const onClick = e => props.handleDataSize(e.target.id);\n    return (\n        <div className=\"bottom-btn-box left-box\">\n            <button id=\"small\" className={classname('small')} onClick={onClick}>\n                Less Data\n            </button>\n            <button id=\"big\" className={classname('big')} onClick={onClick}>\n                More Data\n            </button>\n        </div>\n    );\n};\n\nexport default DataBtns;\n","import React, { Component } from 'react';\nimport '../css/BottomBtns.scss';\n\nclass Pagination extends Component {\n    handlePageButtons(\n        data = this.props.data,\n        itemsOnPage = this.props.itemsOnPage\n    ) {\n        let numPages = Math.ceil(data.length / itemsOnPage);\n        // console.log(numPages);\n        let btnArr = [];\n        for (let i = 1; i <= numPages; i++) {\n            btnArr.push(\n                <button\n                    key={i}\n                    type=\"button\"\n                    onClick={() => {\n                        this.props.handlePageChange(i);\n                    }}\n                    className={`bottom-btn ${\n                        i === this.props.page ? 'active-btn' : ''\n                    }`}>\n                    {i}\n                </button>\n            );\n        }\n        return btnArr;\n    }\n\n    render() {\n        return (\n            <div className=\"bottom-btn-box\">\n                <button\n                    className=\"bottom-btn\"\n                    onClick={() =>\n                        this.props.handlePageChange(this.props.page - 1)\n                    }>\n                    Prev\n                </button>\n                {this.handlePageButtons()}\n                <button\n                    className=\"bottom-btn\"\n                    onClick={() =>\n                        this.props.handlePageChange(this.props.page + 1)\n                    }>\n                    Next\n                </button>\n            </div>\n        );\n    }\n}\n\nexport default Pagination;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport '../css/SearchBar.scss';\n\nclass SearchBar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            input: '',\n        };\n    }\n    handleChangeInput = e => {\n        this.setState({\n            input: e.target.value,\n        });\n    };\n\n    handleEnterInput = e => {\n        if (e.which === 13) {\n            this.props.handleSearch(this.state.input);\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"srch-box\">\n                <input\n                    type=\"search\"\n                    name=\"table-search\"\n                    id=\"q\"\n                    className=\"srch-input\"\n                    placeholder=\"Filter data\"\n                    onChange={this.handleChangeInput}\n                    onKeyPress={this.handleEnterInput}\n                />\n                <button\n                    type=\"button\"\n                    className=\"srch-btn\"\n                    onClick={() => {\n                        this.props.handleSearch(this.state.input);\n                    }}>\n                    Search\n                </button>\n            </div>\n        );\n    }\n}\n\nSearchBar.propTypes = {\n    handleSearch: PropTypes.func.isRequired,\n};\n\nexport default SearchBar;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport Popup from 'reactjs-popup';\nimport '../css/Table.scss';\n\nclass TableRow extends Component {\n    render() {\n        // let {name, position, office, age, start_date, salary} = this.props.data;\n        const {\n            id,\n            firstname,\n            lastname,\n            email,\n            phone,\n            address,\n            description,\n        } = this.props.data;\n        return (\n            <Popup\n                trigger={\n                    <tr>\n                        <td>{id}</td>\n                        <td>{firstname}</td>\n                        <td>{lastname}</td>\n                        <td>{email}</td>\n                        <td>{phone}</td>\n                    </tr>\n                }\n                modal\n                closeOnDocumentClick\n                closeOnEscape>\n                {close => (\n                    <div className=\"modal\">\n                        <span className=\"close\" onClick={close}>\n                            <FontAwesomeIcon icon=\"times\" />\n                        </span>\n                        <div className=\"header\">\n                            {firstname} {lastname}{' '}\n                        </div>\n                        <div className=\"content\">\n                            <b>Description</b>\n                            <textarea defaultValue={description} />\n                            <b>Address</b>\n                            <span>{address.streetAddress}</span>\n                            <b>City</b>\n                            <span>{address.city} </span>\n                            <b>State</b>\n                            <span>{address.state}</span>\n                            <b>Zip </b>\n                            <span>{address.zip}</span>\n                        </div>\n                    </div>\n                )}\n            </Popup>\n        );\n    }\n}\n\nTableRow.propTypes = {\n    data: PropTypes.shape({\n        id: PropTypes.number,\n        firstname: PropTypes.string,\n        lastname: PropTypes.string,\n        email: PropTypes.string,\n        phone: PropTypes.string,\n        address: PropTypes.shape({\n            streetAddress: PropTypes.string,\n            city: PropTypes.string,\n            state: PropTypes.string,\n            zip: PropTypes.string,\n        }),\n        description: PropTypes.string,\n    }).isRequired,\n};\n\nexport default TableRow;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport TableRow from '../containers/TableRow';\nimport '../css/Table.scss';\n\nexport default class Table extends Component {\n    render() {\n        // const headers = ['Name', 'Position', 'Office', 'Age', 'Start Date', 'Salary'];\n        const headers = ['Id', 'First Name', 'Last Name', 'Email', 'Phone'];\n        const sortIcon = <FontAwesomeIcon icon=\"sort\" className=\"header-icon\" />;\n        const sortIconUp = (\n            <FontAwesomeIcon icon=\"sort-up\" className=\"header-icon\" />\n        );\n        const sortIconDown = (\n            <FontAwesomeIcon icon=\"sort-down\" className=\"header-icon\" />\n        );\n        const handleSortChange = (col, sort = this.props.sort) => {\n            if (sort['column'] === col.toLowerCase()) {\n                if (sort['direction'] === 'asc') return sortIconDown;\n                else if (sort['direction'] === 'desc') return sortIconUp;\n            } else return sortIcon;\n        };\n        return (\n            <div className=\"table-container\">\n                <table>\n                    <thead>\n                        <tr>\n                            {headers.map((h, i) => {\n                                return (\n                                    <th\n                                        key={i}\n                                        onClick={() => {\n                                            this.props.handleSort(h);\n                                        }}>\n                                        {h}\n                                        <span>{handleSortChange(h)}</span>\n                                    </th>\n                                );\n                            })}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.data.map(d => {\n                            return (\n                                <TableRow\n                                    key={`${d.id}${Math.floor(\n                                        Math.random() * 10000\n                                    )}`}\n                                    data={d}\n                                />\n                            );\n                        })}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n\n    static propTypes = {\n        data: PropTypes.arrayOf(\n            PropTypes.shape({\n                id: PropTypes.number,\n                firstname: PropTypes.string,\n                lastname: PropTypes.string,\n                email: PropTypes.string,\n                phone: PropTypes.string,\n                address: PropTypes.shape({\n                    streetAddress: PropTypes.string,\n                    city: PropTypes.string,\n                    state: PropTypes.string,\n                    zip: PropTypes.string,\n                }),\n                description: PropTypes.string,\n            })\n        ).isRequired,\n        handleSort: PropTypes.func.isRequired,\n        sort: PropTypes.object.isRequired,\n    };\n}\n","// const baseUrl = 'http://www.filltext.com/?';\nconst smallUrl = 'http://www.filltext.com/?rows=32&id={number|1000}&firstname={firstName}&lastname={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}';\nconst bigUrl = 'http://www.filltext.com/?rows=1000&id={number|1000}&firstname={firstName}&delay=3&lastname={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}';\n\nexport async function fetchSmallData() {\n    let smallData = await fetch(smallUrl)\n        .catch(error => console.log(error));\n    let data = await smallData.json();\n    // console.log(data);\n    return data;\n}\n\nexport async function fetchBigData() {\n    let bigData = await fetch(bigUrl)\n        .catch(error => console.log(error));\n    return await bigData.json();\n}","import { library } from '@fortawesome/fontawesome-svg-core';\nimport {\n    faSort,\n    faSortDown,\n    faSortUp,\n    faTimes,\n} from '@fortawesome/free-solid-svg-icons';\nimport React, { Component } from 'react';\nimport Loader from 'react-loader-spinner';\nimport DataBtns from '../components/DataBtns';\nimport Pagination from '../components/Pagination';\nimport SearchBar from '../components/SearchBar';\nimport Table from '../components/Table';\n// import { data } from \"./data\";\nimport { fetchBigData, fetchSmallData } from '../data/fetchData';\nimport '../css/App.scss';\n\nlibrary.add(faSort, faSortUp, faSortDown, faTimes);\nconst invertSortDirection = {\n    asc: 'desc',\n    desc: 'asc',\n};\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: [],\n            sort: {\n                column: '',\n                direction: 'asc',\n            },\n            page: 1,\n            dataSize: 'small',\n            filter: '',\n            loading: true,\n        };\n        this.itemsOnPage = 15;\n        this.initData = [];\n        this.handleSearch = this.handleSearch.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n        this.handlePageChange = this.handlePageChange.bind(this);\n        this.getDataByPage = this.getDataByPage.bind(this);\n        this.handleDataSize = this.handleDataSize.bind(this);\n    }\n\n    async componentDidMount() {\n        this.handleDataSize(this.state.dataSize);\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <SearchBar handleSearch={this.handleSearch} />\n                <Table\n                    data={this.getDataByPage(\n                        this.orderBy(\n                            this.state.sort['column'],\n                            this.state.sort['direction']\n                        )\n                    )}\n                    handleSort={this.handleSort}\n                    sort={this.state.sort}\n                />\n                {this.state.loading ? (\n                    <div className=\"loader\">\n                        <Loader\n                            type=\"ThreeDots\"\n                            color=\"rgb(186, 91, 141)\"\n                            height=\"100\"\n                            width=\"100\"\n                        />\n                    </div>\n                ) : null}\n                <div className=\"btn-box\">\n                    <DataBtns\n                        handleDataSize={this.handleDataSize}\n                        dataSize={this.state.dataSize}\n                    />\n                    <Pagination\n                        handlePageChange={this.handlePageChange}\n                        itemsOnPage={this.itemsOnPage}\n                        data={this.state.data}\n                        page={this.state.page}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    orderBy(column, direction, data = this.state.data) {\n        if (column.includes(' ')) {\n            column = column.replace(' ', '');\n        }\n\n        const stringSort = () => {\n            switch (direction) {\n                case 'asc':\n                    return data.sort((a, b) =>\n                        a[column].toLowerCase() > b[column].toLowerCase()\n                            ? 1\n                            : -1\n                    );\n                case 'desc':\n                    return data.sort((a, b) =>\n                        a[column].toLowerCase() < b[column].toLowerCase()\n                            ? 1\n                            : -1\n                    );\n                default:\n                    return data;\n            }\n        };\n\n        const intSort = () => {\n            switch (direction) {\n                case 'asc':\n                    return data.sort((a, b) => a[column] - b[column]);\n                case 'desc':\n                    return data.sort((a, b) => (a[column] - b[column]) * -1);\n                default:\n                    return data;\n            }\n        };\n\n        const dateSort = () => {\n            const columnDate = 'start_date';\n            switch (direction) {\n                case 'asc':\n                    return data.sort((a, b) => {\n                        var dateA = new Date(a[columnDate]),\n                            dateB = new Date(b[columnDate]);\n                        return dateA - dateB;\n                    });\n                case 'desc':\n                    return data.sort((a, b) => {\n                        var dateA = new Date(a[columnDate]),\n                            dateB = new Date(b[columnDate]);\n                        return (dateA - dateB) * -1;\n                    });\n                default:\n                    return data;\n            }\n        };\n\n        const salarySort = () => {\n            switch (direction) {\n                case 'asc':\n                    return data.sort((a, b) => {\n                        a = Number(a[column].substr(1));\n                        b = Number(b[column].substr(1));\n                        return a - b;\n                    });\n                case 'desc':\n                    return data.sort((a, b) => {\n                        a = Number(a[column].substr(1));\n                        b = Number(b[column].substr(1));\n                        return (a - b) * -1;\n                    });\n                default:\n                    return data;\n            }\n        };\n\n        switch (column) {\n            case 'name':\n                return stringSort();\n            case 'position':\n                return stringSort();\n            case 'office':\n                return stringSort();\n            case 'age':\n                return intSort();\n            case 'start date':\n                return dateSort();\n            case 'salary':\n                return salarySort();\n            case 'id':\n                return intSort();\n            case 'firstname':\n                return stringSort();\n            case 'lastname':\n                return stringSort();\n            case 'email':\n                return stringSort();\n            case 'phone':\n                return intSort();\n            default:\n                return data;\n        }\n    }\n\n    handleSearch(str) {\n        if (str !== '') {\n            console.log(this.initData);\n            let dataFiltered = this.initData\n                .slice()\n                .filter(\n                    d =>\n                        d.firstname.toLowerCase().includes(str.toLowerCase()) ||\n                        d.lastname.toLowerCase().includes(str.toLowerCase())\n                );\n            console.log(dataFiltered);\n            this.setState({\n                data: dataFiltered,\n                page: 1,\n            });\n        } else {\n            this.setState({\n                data: this.initData,\n                page: 1,\n            });\n        }\n    }\n\n    handleSort(column) {\n        let col = column.toLowerCase();\n        this.setState(state => {\n            return {\n                sort: {\n                    column: col,\n                    direction:\n                        state.sort.column === col\n                            ? invertSortDirection[state.sort.direction]\n                            : 'asc',\n                },\n            };\n        });\n    }\n\n    handlePageChange(pageNum) {\n        let numPages = Math.ceil(this.state.data.length / this.itemsOnPage);\n        if (pageNum >= 1 && pageNum <= numPages) {\n            this.setState({\n                page: pageNum,\n            });\n        }\n    }\n\n    getDataByPage(data = this.state.data) {\n        let dataOnPage = this.state.page * this.itemsOnPage;\n        // console.log(data);\n        let newData = data.slice(dataOnPage - this.itemsOnPage, dataOnPage);\n        // console.log(newData);\n        return newData;\n    }\n\n    async handleDataSize(size) {\n        this.setState({ loading: true });\n        if (size === 'small') {\n            let fetchedData = await fetchSmallData();\n            this.initData = fetchedData.slice();\n            this.setState({\n                data: fetchedData,\n                dataSize: 'small',\n                page: 1,\n                loading: false,\n            });\n        } else if (size === 'big') {\n            let fetchedData = await fetchBigData();\n            this.initData = fetchedData.slice();\n            this.setState({\n                data: fetchedData,\n                dataSize: 'big',\n                page: 1,\n                loading: false,\n            });\n        }\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}